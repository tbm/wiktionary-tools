#!/usr/bin/env python3

# Copyright (C) 2024  Martin Michlmayr <tbm@cyrius.com>
# License: GNU General Public License (GPL), version 3 or above
# SPDX-License-Identifier: GPL-3.0-or-later

"""
Check if hyphenation patterns match the word for all entries of a language
"""

__license__ = "GPL-3.0-or-later"

from pathlib import Path
import re

import click

import kamusi


def get_invalid_hyph_patterns(entry_name, entry, lang):
    """
    For all hyphenation patterns found in an entry, check if it is valid
    (i.e. if the pattern matches the word).
    """
    for pattern in kamusi.get_hyphenations(entry):
        hyph = kamusi.Hyphenation.create(entry_name, pattern, lang)
        if not hyph.is_valid():
            yield hyph


def print_hyph_mismatch(hyph, output_format, lang):
    """
    Print a hyphenation mismatch according to different output formats
    """
    hyph_str = "".join(hyph.get_hyph())
    if output_format == "text":
        print(f"Mismatch: {hyph.get_word()} vs {hyph_str}")
    elif output_format == "csv":
        print(hyph.get_word() + "\t" + hyph_str)
    elif output_format == "wiki":
        print("| {{m|" + lang + "|" + hyph.get_word() + "}} || " + hyph_str)
        print("|-")
    else:
        print("Unknown format ", output_format)


@click.command()
@click.argument("directory")
@click.argument("lang")
@click.option(
    "--output", type=str, required=False, default="text", help="Output format"
)
def check_all_entries(directory, lang, output):
    """
    Check all entries in the directory
    """
    for filepath in sorted(Path(directory).glob("*")):
        if not filepath.is_file():
            continue
        with open(filepath, "r", encoding="utf-8") as entry_fp:
            entry = entry_fp.read()
        # Workaround: ignore words with spaces that have hyphenation
        # patterns containing || since many entries mishandle spaces.
        # This needs more discussion first.
        if " " in filepath.name and re.search(r"\{\{hyph.*\|\|", entry):
            continue
        for hyph in get_invalid_hyph_patterns(filepath.name, entry, lang):
            print_hyph_mismatch(hyph, output, lang)


if __name__ == "__main__":
    check_all_entries()  # pylint: disable=no-value-for-parameter
